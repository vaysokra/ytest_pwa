@page "/appcarnote/app"
@using IndexedDBBlazor.Models
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@* FAB button *@
<MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
    Style="@($"position: fixed;bottom: 20px;right: 20px;")" Href="/appcarnote/addNote" />
@* *@

<MudPaper Class="gap-4 d-flex flex-wrap" Elevation="0">
    @foreach (ReadCarNote _note in _notes)
    {
        <MudCard Outlined="true" @key=_note.ID @onclick="@(() => GotoEdit(_note.ID))">
            <MudCardContent>
                <MudText>Story of the day @_note.title @_note.typeID</MudText>
                <MudText Typo="Typo.body2">@_note.description, @_note.filter , @_note.startDate </MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => Delete(@_note.ID))">Delete
                </MudButton>
            </MudCardActions>
        </MudCard>
    }
</MudPaper>

@code {

    protected override async Task OnInitializedAsync()
    {
        var dotNetObjRef = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("ReadAllNoteDB", dotNetObjRef);
    }
    List<ReadCarNote> _notes = new List<ReadCarNote>();
    CarNote _note = new CarNote();
    [JSInvokable]
    public void _f_readAll(int id, CarNote message)
    {
        _notes.Add(
        new ReadCarNote()
        {
            ID = id,
            title = message.title,
            typeID = message.typeID,
            description = message.description,
            filter = message.filter,
            startDate = message.startDate,
        }
        );
        StateHasChanged();
    }
    [JSInvokable]
    public async void SuccessfulNotify()
    {
        @* NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true); *@
        _notes.Clear();
        StateHasChanged();
        var dotNetObjRef = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("ReadAllNoteDB", dotNetObjRef);
    }
    public async void Delete(int id)
    {
        @* string id = "1"; *@
        var dotNetObjRef = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("DeleteNoteDB", id, dotNetObjRef);
    }
    public void GotoEdit(int id)
    {
        @* string id = "1"; *@
        NavigationManager.NavigateTo("/appcarnote/editNote/" + id);
    }
    public void readData()
    {
        _notes.Add(
        new ReadCarNote()
        {
            title = "car",
            description = "home near",
            filter = 1,
            typeID = 23,
            startDate = Convert.ToDateTime("5/5/2005 15:00:00 PM")
        }
        );
    }

}